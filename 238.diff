diff --git a/cmd/export.go b/cmd/export.go
index 18f42df..82babdf 100644
--- a/cmd/export.go
+++ b/cmd/export.go
@@ -9,6 +9,7 @@ import (
 	"strings"
 	"time"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/model"
 	"src.techknowlogick.com/shiori/utils"
 
@@ -37,7 +38,7 @@ func runExportBookmarks(c *cli.Context) error {
 	}
 
 	// Fetch bookmarks from database
-	bookmarks, err := db.GetBookmarks(false)
+	bookmarks, err := db.GetBookmarks(database.BookmarkOptions{})
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
diff --git a/cmd/open.go b/cmd/open.go
index 1bf751d..081161e 100644
--- a/cmd/open.go
+++ b/cmd/open.go
@@ -5,6 +5,7 @@ import (
 	"fmt"
 	"strings"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/utils"
 
 	"github.com/urfave/cli"
@@ -64,7 +65,7 @@ func runOpenBookmark(c *cli.Context) error {
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
-	bookmarks, err := db.GetBookmarks(true, ids...)
+	bookmarks, err := db.GetBookmarks(database.BookmarkOptions{}, ids...)
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
diff --git a/cmd/print.go b/cmd/print.go
index b3d0fc8..fd24050 100644
--- a/cmd/print.go
+++ b/cmd/print.go
@@ -5,6 +5,7 @@ import (
 	"errors"
 	"fmt"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/utils"
 
 	"github.com/urfave/cli"
@@ -52,7 +53,7 @@ func runPrintBookmarks(c *cli.Context) error {
 	}
 
 	// Read bookmarks from database
-	bookmarks, err := db.GetBookmarks(false, ids...)
+	bookmarks, err := db.GetBookmarks(database.BookmarkOptions{}, ids...)
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
diff --git a/cmd/search.go b/cmd/search.go
index 779eb34..9d7a476 100644
--- a/cmd/search.go
+++ b/cmd/search.go
@@ -5,6 +5,7 @@ import (
 	"errors"
 	"fmt"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/utils"
 
 	"github.com/urfave/cli"
@@ -54,7 +55,7 @@ func runSearchBookmarks(c *cli.Context) error {
 	}
 
 	// Read bookmarks from database
-	bookmarks, err := db.SearchBookmarks(false, keyword, tags...)
+	bookmarks, err := db.SearchBookmarks(database.BookmarkOptions{Keyword: keyword}, tags...)
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
diff --git a/cmd/serve/web-handler-api.go b/cmd/serve/web-handler-api.go
index 2604e89..27f6bac 100644
--- a/cmd/serve/web-handler-api.go
+++ b/cmd/serve/web-handler-api.go
@@ -13,6 +13,8 @@ import (
 	"sync"
 	"time"
 
+	"src.techknowlogick.com/shiori/database"
+	"src.techknowlogick.com/shiori/model"
 	"src.techknowlogick.com/shiori/utils"
 
 	valid "github.com/asaskevich/govalidator"
@@ -21,7 +23,6 @@ import (
 	"github.com/go-shiori/go-readability"
 	"github.com/gofrs/uuid"
 	"golang.org/x/crypto/bcrypt"
-	"src.techknowlogick.com/shiori/model"
 )
 
 // login is handler for POST /api/login
@@ -33,12 +34,16 @@ func (h *webHandler) apiLogin(c *gin.Context) {
 
 	// Get account data from database
 	account, err := h.db.GetAccount(request.Username)
-	utils.CheckError(err)
+	if err != nil {
+		c.String(http.StatusBadRequest, "Username or Password incorrect")
+		return
+	}
 
 	// Compare password with database
 	err = bcrypt.CompareHashAndPassword([]byte(account.Password), []byte(request.Password))
 	if err != nil {
-		panic(fmt.Errorf("Username and password don't match"))
+		c.String(http.StatusBadRequest, "Username or Password incorrect")
+		return
 	}
 
 	// Calculate expiration time
@@ -77,7 +82,7 @@ func (h *webHandler) apiGetBookmarks(c *gin.Context) {
 	}
 
 	// Fetch all matching bookmarks
-	bookmarks, err := h.db.SearchBookmarks(true, keyword, tags...)
+	bookmarks, err := h.db.SearchBookmarks(database.BookmarkOptions{Keyword: keyword}, tags...)
 	utils.CheckError(err)
 
 	err = json.NewEncoder(c.Writer).Encode(&bookmarks)
@@ -217,7 +222,7 @@ func (h *webHandler) apiUpdateBookmark(c *gin.Context) {
 
 	// Get existing bookmark from database
 	reqID := request.ID
-	bookmarks, err := h.db.GetBookmarks(true, reqID)
+	bookmarks, err := h.db.GetBookmarks(database.BookmarkOptions{}, reqID)
 	utils.CheckError(err)
 	if len(bookmarks) == 0 {
 		panic(fmt.Errorf("No bookmark with matching index"))
@@ -277,7 +282,7 @@ func (h *webHandler) apiUpdateBookmarkTags(c *gin.Context) {
 	}
 
 	// Get existing bookmark from database
-	bookmarks, err := h.db.GetBookmarks(true, request.IDs...)
+	bookmarks, err := h.db.GetBookmarks(database.BookmarkOptions{}, request.IDs...)
 	utils.CheckError(err)
 	if len(bookmarks) == 0 {
 		panic(fmt.Errorf("No bookmark with matching index"))
@@ -325,7 +330,7 @@ func (h *webHandler) apiUpdateCache(c *gin.Context) {
 	wg := sync.WaitGroup{}
 
 	// Fetch bookmarks from database
-	books, err := h.db.GetBookmarks(false, ids...)
+	books, err := h.db.GetBookmarks(database.BookmarkOptions{}, ids...)
 	utils.CheckError(err)
 
 	// Download new cache data
diff --git a/cmd/serve/web-handler-ui.go b/cmd/serve/web-handler-ui.go
index 95464de..8f02e43 100644
--- a/cmd/serve/web-handler-ui.go
+++ b/cmd/serve/web-handler-ui.go
@@ -12,6 +12,7 @@ import (
 	fp "path/filepath"
 	"strconv"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/utils"
 
 	"github.com/gin-gonic/gin"
@@ -33,8 +34,35 @@ func (h *webHandler) serveIndexPage(c *gin.Context) {
 		return
 	}
 
-	err = serveFile(c, "index.html")
+	bookmarks, err := h.db.GetBookmarks(database.BookmarkOptions{})
 	utils.CheckError(err)
+
+	// Create template
+	funcMap := template.FuncMap{
+		"html": func(s string) template.HTML {
+			return template.HTML(s)
+		},
+		"hostname": func(s string) string {
+			parsed, err := nurl.ParseRequestURI(s)
+			if err != nil || len(parsed.Scheme) == 0 {
+				return s
+			}
+
+			return parsed.Hostname()
+		},
+	}
+
+	tplCache, err := createTemplate("index.html", funcMap)
+	utils.CheckError(err)
+
+	bt, err := json.Marshal(&bookmarks)
+	utils.CheckError(err)
+
+	// Execute template
+	strBt := string(bt)
+	err = tplCache.Execute(c.Writer, &strBt)
+	utils.CheckError(err)
+
 }
 
 // serveSubmitPage is handler for GET /submit
@@ -64,7 +92,7 @@ func (h *webHandler) serveBookmarkCache(c *gin.Context) {
 	utils.CheckError(err)
 
 	// Get bookmarks in database
-	bookmarks, err := h.db.GetBookmarks(true, id)
+	bookmarks, err := h.db.GetBookmarks(database.BookmarkOptions{}, id)
 	utils.CheckError(err)
 
 	if len(bookmarks) == 0 {
@@ -89,12 +117,7 @@ func (h *webHandler) serveBookmarkCache(c *gin.Context) {
 	tplCache, err := createTemplate("cache.html", funcMap)
 	utils.CheckError(err)
 
-	bt, err := json.Marshal(&bookmarks[0])
-	utils.CheckError(err)
-
-	// Execute template
-	strBt := string(bt)
-	err = tplCache.Execute(c.Writer, &strBt)
+	err = tplCache.Execute(c.Writer, &bookmarks[0])
 	utils.CheckError(err)
 }
 
diff --git a/cmd/update.go b/cmd/update.go
index d9137d4..3dc616e 100644
--- a/cmd/update.go
+++ b/cmd/update.go
@@ -10,6 +10,7 @@ import (
 	"sync"
 	"time"
 
+	"src.techknowlogick.com/shiori/database"
 	"src.techknowlogick.com/shiori/utils"
 
 	valid "github.com/asaskevich/govalidator"
@@ -127,7 +128,7 @@ func runUpdateBookmarks(c *cli.Context) error {
 	wg := sync.WaitGroup{}
 
 	// Fetch bookmarks from database
-	bookmarks, err := db.GetBookmarks(true, ids...)
+	bookmarks, err := db.GetBookmarks(database.BookmarkOptions{}, ids...)
 	if err != nil {
 		return errors.New(utils.CErrorSprint(err))
 	}
diff --git a/database/database.go b/database/database.go
index 4dc35eb..01ccf6c 100644
--- a/database/database.go
+++ b/database/database.go
@@ -10,7 +10,7 @@ type Database interface {
 	InsertBookmark(bookmark *model.Bookmark) error
 
 	// GetBookmarks fetch list of bookmarks based on submitted ids.
-	GetBookmarks(withContent bool, ids ...int) ([]model.Bookmark, error)
+	GetBookmarks(options BookmarkOptions, ids ...int) ([]model.Bookmark, error)
 
 	// GetTags fetch list of tags and their frequency
 	GetTags() ([]model.Tag, error)
@@ -19,7 +19,7 @@ type Database interface {
 	DeleteBookmarks(ids ...int) error
 
 	// SearchBookmarks search bookmarks by the keyword or tags.
-	SearchBookmarks(orderLatest bool, keyword string, tags ...string) ([]model.Bookmark, error)
+	SearchBookmarks(options BookmarkOptions, tags ...string) ([]model.Bookmark, error)
 
 	// UpdateBookmarks updates the saved bookmark in database.
 	UpdateBookmarks(bookmarks ...model.Bookmark) ([]model.Bookmark, error)
diff --git a/database/structs.go b/database/structs.go
new file mode 100644
index 0000000..49e1df5
--- /dev/null
+++ b/database/structs.go
@@ -0,0 +1,9 @@
+package database
+
+// BookmarkOptions
+type BookmarkOptions struct {
+	WithContent bool
+	MaxID       int
+	PerPage     int
+	Keyword     string
+}
diff --git a/database/xorm.go b/database/xorm.go
index c0031fd..d2317bc 100644
--- a/database/xorm.go
+++ b/database/xorm.go
@@ -92,13 +92,21 @@ func (db *XormDatabase) InsertBookmark(bookmark *model.Bookmark) error {
 }
 
 // GetBookmarks fetch list of bookmarks based on submitted ids.
-func (db *XormDatabase) GetBookmarks(withContent bool, ids ...int) ([]model.Bookmark, error) {
+func (db *XormDatabase) GetBookmarks(options BookmarkOptions, ids ...int) ([]model.Bookmark, error) {
 	bookmarks := make([]model.Bookmark, 0)
 	var err error
 	if len(ids) > 0 {
 		err = db.In("id", ids).Find(&bookmarks)
 	} else {
-		err = db.Find(&bookmarks)
+		searchCond := builder.NewCond()
+		if options.MaxID != 0 {
+			searchCond.And(builder.Lt{"id": options.MaxID})
+		}
+		limit := 30
+		if options.PerPage > 0 {
+			limit = options.PerPage
+		}
+		err = db.Where(searchCond).Limit(limit).Find(&bookmarks)
 	}
 	for i := 0; i < len(bookmarks); i++ {
 		bookmarks[i].Tags = make([]model.Tag, 0)
@@ -141,13 +149,13 @@ func (db *XormDatabase) deleteBookmarks(ids ...int) error {
 }
 
 // SearchBookmarks search bookmarks by the keyword or tags.
-func (db *XormDatabase) SearchBookmarks(orderLatest bool, keyword string, tags ...string) ([]model.Bookmark, error) {
+func (db *XormDatabase) SearchBookmarks(options BookmarkOptions, tags ...string) ([]model.Bookmark, error) {
 	//var bookmarks []model.Bookmark
 	bookmarks := make([]model.Bookmark, 0)
 	searchCond := builder.NewCond()
 
-	if len(keyword) > 0 {
-		keyword = strings.TrimSpace(keyword)
+	if len(options.Keyword) > 0 {
+		keyword := strings.TrimSpace(options.Keyword)
 		lowerKeyword := strings.ToLower(keyword)
 		exprCond := builder.Or(
 			builder.Like{"title", lowerKeyword},
@@ -232,7 +240,10 @@ func (db *XormDatabase) CreateAccount(username, password string) error {
 // GetAccount fetch account with matching username
 func (db *XormDatabase) GetAccount(username string) (model.Account, error) {
 	var account model.Account
-	_, err := db.Where("username = ?", username).Get(&account)
+	has, err := db.Where("username = ?", username).Get(&account)
+	if !has && err == nil {
+		err = fmt.Errorf("user doesn't exist")
+	}
 	return account, err
 }
